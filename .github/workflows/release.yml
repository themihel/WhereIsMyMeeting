name: Release

on:
  push:
    branches:
      - main

jobs:
  tests:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Check if yarn cache exists
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'false' }}
        run: echo "Yarn cache found, install using cached files!"
      - name: Install dependencies using yarn # --prefer-offline for hitting the cache
        run: yarn install --frozen-lockfile --no-progress --prefer-offline
      - name: Run tests
        run: yarn test
  prepare_release:
    name: Prepare release
    needs: [tests]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.package-version.outputs.prop }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get version of package.json
        id: package-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './package.json'
          prop_path: 'version'
      - name: Get version of manifest.json
        id: manifest-version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: './extension/manifest.json'
          prop_path: 'version'
      - name: Check if versions differ
        if: ${{ steps.manifest-version.outputs.prop !== steps.package-version.outputs.prop }}
        run: exit 1
      - name: Compress extension to a .zip file
        uses: papeloto/action-zip@v1
        with:
          files: extension/
          dest: WhereIsMyMeeting.zip
      - name: Upload extension artifact
        uses: actions/upload-artifact@v2
        with:
          name: WhereIsMyMeeting
          path: WhereIsMyMeeting.zip
  github_release:
    name: Github release
    needs: [tests, prepare_release]
    runs-on: ubuntu-latest
    steps:
      - name: Create Github release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{needs.prepare_release.outputs.version}}
          release_name: v${{needs.prepare_release.outputs.version}}
          body: |
            Further information will be added soon!
          draft: false
          prerelease: false
      - name: Download extension artifact
        uses: actions/download-artifact@v2
        with:
          name: WhereIsMyMeeting
      - name: Add extension to Github release
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: WhereIsMyMeeting.zip
          asset_name: WhereIsMyMeeting.zip
          asset_content_type: application/zip
  chrome_store_release:
    name: Chrome store release
    needs: [tests, prepare_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download extension artifact
        uses: actions/download-artifact@v2
        with:
          name: WhereIsMyMeeting
      - name: Upload extension to Chrome store
        run: echo "Coming soon" #TODO
  firefox_store_prepare_release:
    name: Prepare firefox release
    needs: [tests, prepare_release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Lint Firefox extension
        uses: kewisch/action-web-ext@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          cmd: lint
          source: extension
          channel: listed
      - name: Build Firefox extension
        id: web-ext-build
        uses: kewisch/action-web-ext@v1
        with:
          cmd: build
          source: extension
      - name: Signing Firefox extension
        id: web-ext-sign
        uses: kewisch/action-web-ext@v1
        with:
          cmd: sign
          source: ${{ steps.web-ext-build.outputs.target }}
          channel: unlisted
          apiKey: TODO # ${{ secrets.FIREFOX_API_KEY }} # TODO
          apiSecret: TODO # ${{ secrets.FIREFOX_API_SECRET }} # TODO
          timeout: 900000
      - name: Upload firefox extension artifact
        uses: actions/upload-artifact@v2
        with:
          name: Firefox-WhereIsMyMeeting
          path: ${{ steps.web-ext-sign.outputs.target }}
  firefox_store_release:
    name: Firefox store release
    needs: [tests, prepare_release, firefox_store_prepare_release]
    runs-on: ubuntu-latest
    steps:
      - name: Download firefox extension artifact
        uses: actions/download-artifact@v2
        with:
          name: Firefox-WhereIsMyMeeting
      - name: Upload extension to Firefox store
        uses: trmcnvn/firefox-addon@v1
        with:
          # uuid is only necessary when updating an existing addon,
          # omitting it will create a new addon
          uuid: '' # TODO
          xpi: build/my-addon.xpi # TODO: Figure out how file output of previous step is named
          manifest: manifest.json
          api-key: TODO # ${{ secrets.FIREFOX_API_KEY }} # TODO
          api-secret: TODO # ${{ secrets.FIREFOX_API_SECRET }} # TODO